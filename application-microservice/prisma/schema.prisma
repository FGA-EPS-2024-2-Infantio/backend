generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Class {
  id       String    @id @default(cuid())
  name     String
  students Student[]
  disabled Boolean   @default(false)

  disabledAt DateTime?

  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  schoolId String
  school   School @relation(fields: [schoolId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  attendance Attendance[]
}

enum CategorieType {
  PARCIAL
  INTEGRAL
}

enum ClassType {
  BERCARIO
  CRECHE
  ESCOLA
  REFORCO
}

enum TurnType {
  MATUTINO
  VESPERTINO
}

model Student {
  id                 String        @id @default(cuid())
  name               String
  categorie          CategorieType
  schoolId           String
  school             School        @relation(fields: [schoolId], references: [id])
  isFilled           Boolean       @default(false)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  class              ClassType
  disabled           Boolean       @default(false)
  disabledAt         DateTime?
  turn               TurnType
  cep                String?
  dataNascimento     String?
  endereco           String?
  mae                Json?
  naturalidadeAluno  String?
  observacoes        Json?
  observacoesMedicas Json?
  pai                Json?
  responsaveis       Json?
  classes            Class[]
  Attendance         Attendance[]
  payments           MonthlyPayment[]
}

model Attendance {
  id          String   @id @default(cuid())
  studentId   String   @map("student_id")
  classId     String   @map("class_id")
  date        DateTime @db.Date
  hasAttended Boolean  @map("has_attended")

  class   Class   @relation(fields: [classId], references: [id])
  student Student @relation(fields: [studentId], references: [id])

  @@map("attendance")
}

model School {
  id             String   @id @default(cuid())
  name           String
  directorEmail  String
  userId         String   @unique
  numberStudents Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  classes    Class[]
  students   Student[]
  teachers   Teacher[]
  disabled   Boolean   @default(false)
  disabledAt DateTime?
}

model Teacher {
  id              String   @id @default(cuid())
  name            String
  numberOfClasses Int      @default(0) @map("number_of_classes")
  cpf             String   @unique @db.VarChar(14)
  startDate       DateTime @map("start_date")
  disabled        Boolean  @default(false)

  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  disabledAt DateTime? @map("disabled_at")

  classes  Class[]
  userId   String  
  schoolId String
  school   School  @relation(fields: [schoolId], references: [id])

  @@map("teacher")
}

model MonthlyPayment {
  id         String        @id @default(cuid())
  student    Student       @relation(fields: [studentId], references: [id])
  studentId  String
  month      Int
  year       Int
  value      Float
  payed      Boolean       @default(false)
  disabled   Boolean       @default(false)
  disabledAt DateTime?
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")
}

model Ticket {
  id             String   @id @default(cuid())
  title          String
  message        String
  response       String?  
  status         Status  @default(OPEN)  
  directorId     String  
  directorName   String  
  adminId        String? 
  
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("ticket")
}

enum Status {
  OPEN
  CLOSED
}
